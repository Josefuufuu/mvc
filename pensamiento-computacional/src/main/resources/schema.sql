-- Drop existing tables to allow re-initialization in embedded databases
DROP TABLE IF EXISTS SCORING_EVENT CASCADE;
DROP TABLE IF EXISTS PERFORMANCE_TIER_HISTORY CASCADE;
DROP TABLE IF EXISTS TEACHING_ASSIGNMENT CASCADE;
DROP TABLE IF EXISTS ENROLLMENT CASCADE;
DROP TABLE IF EXISTS ACTIVITY_EXERCISE CASCADE;
DROP TABLE IF EXISTS ACTIVITY CASCADE;
DROP TABLE IF EXISTS EXERCISE_TARGET_PROFILE CASCADE;
DROP TABLE IF EXISTS EXERCISE CASCADE;
DROP TABLE IF EXISTS GROUP_SECTION CASCADE;
DROP TABLE IF EXISTS ACADEMIC_TERM CASCADE;
DROP TABLE IF EXISTS ROLE_PERMISSION CASCADE;
DROP TABLE IF EXISTS USER_ACCOUNT_ROLE CASCADE;
DROP TABLE IF EXISTS PERMISSION CASCADE;
DROP TABLE IF EXISTS ROLE CASCADE;
DROP TABLE IF EXISTS USER_ACCOUNT CASCADE;
DROP TABLE IF EXISTS LEVEL_TIER CASCADE;

CREATE TABLE LEVEL_TIER (
    code VARCHAR(20) PRIMARY KEY
);

CREATE TABLE USER_ACCOUNT (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    institutional_email VARCHAR(255) NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    full_name VARCHAR(255) NOT NULL,
    profile_photo_url VARCHAR(500),
    created_at TIMESTAMP,
    self_declared_level VARCHAR(20),
    CONSTRAINT uq_user_account_email UNIQUE (institutional_email),
    CONSTRAINT fk_user_account_level FOREIGN KEY (self_declared_level) REFERENCES LEVEL_TIER(code)
);

CREATE TABLE ROLE (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description VARCHAR(500),
    CONSTRAINT uq_role_name UNIQUE (name)
);

CREATE TABLE PERMISSION (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(150) NOT NULL,
    description VARCHAR(500),
    CONSTRAINT uq_permission_name UNIQUE (name)
);

CREATE TABLE USER_ACCOUNT_ROLE (
    user_account_id INTEGER NOT NULL,
    role_id INTEGER NOT NULL,
    PRIMARY KEY (user_account_id, role_id),
    CONSTRAINT fk_user_account_role_user FOREIGN KEY (user_account_id) REFERENCES USER_ACCOUNT(id),
    CONSTRAINT fk_user_account_role_role FOREIGN KEY (role_id) REFERENCES ROLE(id)
);

CREATE TABLE ROLE_PERMISSION (
    role_id INTEGER NOT NULL,
    permission_id INTEGER NOT NULL,
    PRIMARY KEY (role_id, permission_id),
    CONSTRAINT fk_role_permission_role FOREIGN KEY (role_id) REFERENCES ROLE(id),
    CONSTRAINT fk_role_permission_permission FOREIGN KEY (permission_id) REFERENCES PERMISSION(id)
);

CREATE TABLE ACADEMIC_TERM (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    term_code VARCHAR(30) NOT NULL,
    start_on TIMESTAMP NOT NULL,
    ends_on TIMESTAMP NOT NULL,
    is_active BOOLEAN NOT NULL,
    CONSTRAINT unq_term_code UNIQUE (term_code)
);

CREATE TABLE GROUP_SECTION (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    academic_term_id INTEGER NOT NULL,
    group_code VARCHAR(20) NOT NULL,
    section_title VARCHAR(255),
    CONSTRAINT fk_group_section_term FOREIGN KEY (academic_term_id) REFERENCES ACADEMIC_TERM(id),
    CONSTRAINT un_group_code_per_term UNIQUE (academic_term_id, group_code),
    CONSTRAINT un_group_term_id_id UNIQUE (academic_term_id, id)
);

CREATE TABLE EXERCISE (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    prompt VARCHAR(4000) NOT NULL,
    difficulty INTEGER NOT NULL
);

CREATE TABLE ACTIVITY (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    group_section_id INTEGER NOT NULL,
    created_by_user_id INTEGER NOT NULL,
    title VARCHAR(255) NOT NULL,
    description VARCHAR(1000),
    window_start_at TIMESTAMP NOT NULL,
    window_end_at TIMESTAMP,
    CONSTRAINT fk_activity_group_section FOREIGN KEY (group_section_id) REFERENCES GROUP_SECTION(id),
    CONSTRAINT fk_activity_created_by FOREIGN KEY (created_by_user_id) REFERENCES USER_ACCOUNT(id)
);

CREATE TABLE ACTIVITY_EXERCISE (
    activity_id INTEGER NOT NULL,
    exercise_id INTEGER NOT NULL,
    display_order INTEGER NOT NULL,
    PRIMARY KEY (activity_id, exercise_id),
    CONSTRAINT fk_activity_exercise_activity FOREIGN KEY (activity_id) REFERENCES ACTIVITY(id),
    CONSTRAINT fk_activity_exercise_exercise FOREIGN KEY (exercise_id) REFERENCES EXERCISE(id),
    CONSTRAINT uq_activity_display UNIQUE (activity_id, display_order)
);

CREATE TABLE EXERCISE_TARGET_PROFILE (
    exercise_id INTEGER NOT NULL,
    profile_code VARCHAR(20) NOT NULL,
    PRIMARY KEY (exercise_id, profile_code),
    CONSTRAINT fk_target_profile_exercise FOREIGN KEY (exercise_id) REFERENCES EXERCISE(id),
    CONSTRAINT fk_target_profile_level FOREIGN KEY (profile_code) REFERENCES LEVEL_TIER(code)
);

CREATE TABLE ENROLLMENT (
    student_id INTEGER NOT NULL,
    academic_term_id INTEGER NOT NULL,
    group_section_id INTEGER NOT NULL,
    enrolled_on TIMESTAMP,
    PRIMARY KEY (student_id, academic_term_id),
    CONSTRAINT fk_enrollment_student FOREIGN KEY (student_id) REFERENCES USER_ACCOUNT(id),
    CONSTRAINT fk_enrollment_academic_term FOREIGN KEY (academic_term_id) REFERENCES ACADEMIC_TERM(id),
    CONSTRAINT fk_enrollment_group_section FOREIGN KEY (group_section_id) REFERENCES GROUP_SECTION(id),
    CONSTRAINT uq_enrollment_student_term UNIQUE (student_id, academic_term_id)
);

CREATE TABLE PERFORMANCE_TIER_HISTORY (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    student_id INTEGER NOT NULL,
    academic_term_id INTEGER NOT NULL,
    tier_code VARCHAR(20) NOT NULL,
    computed_at TIMESTAMP,
    revision_no INTEGER NOT NULL,
    basis_summary VARCHAR(1000),
    method_version VARCHAR(100),
    CONSTRAINT fk_pth_student FOREIGN KEY (student_id) REFERENCES USER_ACCOUNT(id),
    CONSTRAINT fk_pth_term FOREIGN KEY (academic_term_id) REFERENCES ACADEMIC_TERM(id),
    CONSTRAINT fk_pth_level FOREIGN KEY (tier_code) REFERENCES LEVEL_TIER(code),
    CONSTRAINT uq_pth_revison UNIQUE (student_id, academic_term_id, revision_no)
);

CREATE TABLE SCORING_EVENT (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    student_id INTEGER NOT NULL,
    activity_id INTEGER NOT NULL,
    exercise_id INTEGER NOT NULL,
    awarded_points INTEGER NOT NULL,
    awarded_by_user_id INTEGER NOT NULL,
    CONSTRAINT fk_scoring_event_student FOREIGN KEY (student_id) REFERENCES USER_ACCOUNT(id),
    CONSTRAINT fk_scoring_event_activity_exercise FOREIGN KEY (activity_id, exercise_id) REFERENCES ACTIVITY_EXERCISE(activity_id, exercise_id),
    CONSTRAINT fk_scoring_event_awarded_by FOREIGN KEY (awarded_by_user_id) REFERENCES USER_ACCOUNT(id)
);

CREATE TABLE TEACHING_ASSIGNMENT (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    professor_id INTEGER NOT NULL,
    group_section_id INTEGER NOT NULL,
    assigned_on TIMESTAMP,
    CONSTRAINT fk_teaching_assignment_professor FOREIGN KEY (professor_id) REFERENCES USER_ACCOUNT(id),
    CONSTRAINT fk_teaching_assignment_group FOREIGN KEY (group_section_id) REFERENCES GROUP_SECTION(id)
);
